import telebot
from telebot import types
import json
import os.path
import random

bot = telebot.TeleBot('7677668515:AAGbn7pZJypPG5-6BIeiSXVPuPeVjv5mnN4')

# —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–æ–∫
BUTTONS = ["–ù–æ–≤–∞—è –∏–≥—Ä–∞ üí∞", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä"]
# —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
USER_DATA = "data.json"
# —Ñ–∞–π–ª —Å–æ —Å–ø–∏—Å–∫–æ–º –≤—Å–µ—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
QUESTIONS = "question.json"
# —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–æ–≤ –±–æ—Ç–∞
ANSWERS_YES = ["üëç –ê–±—Å–æ–ª—é—Ç–Ω–æ –≤–µ—Ä–Ω–æ! üëç", "üëè –í—ã –ø—Ä–∞–≤—ã, –∫–∞–∫ –Ω–∏–∫–æ–≥–¥–∞! üëè", "üëå –î–æ—Å—Ç–æ–π–Ω—ã–π –æ—Ç–≤–µ—Ç –∏, –∫ —Ç–æ–º—É –∂–µ, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π! üëå"]

# –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏: —Å–ª–æ–≤–∞—Ä—å –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤, 
# –∫–ª—é—á–æ–º —è–≤–ª—è–µ—Ç—Å—è —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞, –∑–Ω–∞—á–µ–Ω–∏–µ–º —è–≤–ª—è–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤, –≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç - –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤ —Å–ø–∏—Å–∫–µ
# —ç—Ç–æ—Ç —Å–ª–æ–≤–∞—Ä—å –∑–∞–ø–∏—Å–∞–Ω –≤ —Ñ–∞–π–ª question.json

# questions_dict = {
#  "–ö–∞–∫–æ–π –≤–∏–¥ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞, –µ—â–µ –Ω–µ –∏–º–µ–µ—Ç —Å–ª—É–∂–±—ã –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ –±–∏–ª–µ—Ç–æ–≤?" : ["–ú–æ—Ä—Å–∫–æ–π", "–ê–≤–∏–∞—Ü–∏–æ–Ω–Ω—ã–π", "–ñ–µ–ª–µ–∑–Ω–æ–¥–æ—Ä–æ–∂–Ω—ã–π", "–¢—Ä–æ–ª–ª–µ–π–±—É—Å–Ω—ã–π"],
#  "–ö–∞–∫ –∑–≤–∞–ª–∏ –ø—É—à–∫–∏–Ω—Å–∫–æ–≥–æ –û–Ω–µ–≥–∏–Ω–∞?" : ["–ê–ª–µ–∫—Å–∞–Ω–¥—Ä", "–ò–≤–∞–Ω", "–ú–∏—Ö–∞–∏–ª", "–ï–≤–≥–µ–Ω–∏–π"],
#  "–ö–æ–≥–æ —Ä—ã–±–∞–∫ –≤—Å–µ–≥–¥–∞ –≤–∏–¥–∏—Ç –∏–∑–¥–∞–ª–µ–∫–∞?" : ["–ß–µ—Ä–≤—è–∫–∞", "–†—ã–±–æ–≤–æ–¥–∞", "–†—ã–±–Ω–∞–¥–∑–æ—Ä", "–†—ã–±–∞–∫–∞"],
#  "–ö–∞–∫–æ–π –∏–∑ —ç—Ç–∏—Ö —ç—Ç–∞–ø–æ–≤ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–µ –∏–º–µ–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —à–∫–æ–ª—å–Ω–æ–≥–æ —É—á–µ–±–Ω–∏–∫–∞?" : ["–î—Ä–µ–≤–Ω–∏–π –º–∏—Ä", "–°—Ä–µ–¥–Ω–∏–µ –≤–µ–∫–∞", "–ù–æ–≤–µ–π—à–∞—è –∏—Å—Ç–æ—Ä–∏—è", "–°–æ–≤–µ—Ç—Å–∫–∞—è –ø–µ—Ä–µ—Å—Ç—Ä–æ–π–∫–∞"],
#  "–ß–µ—Ä–µ–∑ –∫–∞–∫—É—é –ø–∞–ø–∫—É –º–æ–∂–Ω–æ –¥–µ—Ñ—Ä–∞–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∏—Å–∫ –≤ 95 Windows?" : ["–ö–æ—Ä–∑–∏–Ω–∞", "–°–µ—Ç–µ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ", "–ú–æ–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã", "–ú–æ–π –∫–æ–º–ø—å—é—Ç–µ—Ä"],
#  "–ö–∞–∫–æ–µ –∏–∑ —ç—Ç–∏—Ö –∂–µ–Ω—Å–∫–∏—Ö –∏–º–µ–Ω –≤ –ø–µ—Ä–µ–≤–æ–¥–µ —Å –ª–∞—Ç–∏–Ω—Å–∫–æ–≥–æ –æ–∑–Ω–∞—á–∞–µ—Ç '–ü–æ–±–µ–¥–∞'?" : ["–û–ª–∏–º–ø–∏–∞–¥–∞", "–ù–æ—è–±—Ä–∏–Ω–∞", "–ö–∞–ø–∏—Ç–æ–ª–∏–Ω–∞", "–í–∏–∫—Ç–æ—Ä–∏—è"],
#  "–ß–µ–º—É —Ä–∞–≤–µ–Ω –ø–µ—Ä–∏–º–µ—Ç—Ä —Ä–æ–º–±–∞ —Å–æ —Å—Ç–æ—Ä–æ–Ω–æ–π 2 –º?" : ["4 –º–µ—Ç—Ä–∞", "6 –ª–∏—Ç—Ä–æ–≤", "8 –º–µ—Ç—Ä–æ–≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö", "8 –º–µ—Ç—Ä–æ–≤"],
#  "–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –æ—Å—Ç—Ä–∞—è –º–µ–∫—Å–∏–∫–∞–Ω—Å–∫–∞—è –ø—Ä–∏–ø—Ä–∞–≤–∞?" : ["–°–∞—Ü–∏–≤–∏", "–ü–∏—Ü—Ü–∞", "–õ–µ—á–æ", "–ß–∏–ª–∏"],
#  "–ß—Ç–æ –Ω–∞ —Ç–µ–∞—Ç—Ä–∞–ª—å–Ω–æ–º –±–∏–ª–µ—Ç–µ –æ–±–æ–∑–Ω–∞—á–µ–Ω–æ —Ü–∏—Ñ—Ä–∞–º–∏?" : ["–†–∞–∑–º–µ—Ä –∫—Ä–µ—Å–ª–∞", "–ì–∞—Ä–¥–µ—Ä–æ–±–Ω—ã–π –Ω–æ–º–µ—Ä", "–û—á–µ—Ä–µ–¥—å –≤ –±—É—Ñ–µ—Ç", "–†—è–¥ –∏ –º–µ—Å—Ç–æ"],
#  "–ß—Ç–æ –ü—ë—Ç—Ä I –≤–µ–ª–µ–ª –±—Ä–∏—Ç—å –≤—Å–µ–º –±–æ—è—Ä–∞–º –∏ –¥–≤–æ—Ä—è–Ω–∞–º?" : ["–ö–æ—Å—ã", "–ù–æ–≥–∏", "–ë—Ä–æ–≤–∏", "–ë–æ—Ä–æ–¥—ã"],
#  "–ö–∞–∫–æ–µ –∏–∑ —ç—Ç–∏—Ö —è–¥–µ—Ä –º–µ–Ω—å—à–µ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö?" : ["–ü—É—à–µ—á–Ω–æ–µ", "–ú–µ—Ç–∞—Ç–µ–ª—å–Ω–æ–µ", "–ó–µ–º–Ω–æ–µ", "–ê—Ç–æ–º–Ω–æ–µ"],
#  "–ö–∞–∫–æ–π —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –ù–ï –≤—Ö–æ–¥–∏—Ç –≤ —Å–æ—Å—Ç–∞–≤ –ü–∏—Ä–∞–º–∏–¥—ã –•–µ–æ–ø—Å–∞?" : ["–ë–∞–∑–∞–ª—å—Ç", "–ì—Ä–∞–Ω–∏—Ç", "–ò–∑–≤–µ—Å—Ç–Ω—è–∫", "–ê—Å–±–µ—Å—Ç"],
#  "–®–∫—É—Ä—É –∫–∞–∫–æ–≥–æ –º–µ–¥–≤–µ–¥—è –Ω–µ –ø—Ä–∏–Ω—è—Ç–æ –¥–µ–ª–∏—Ç—å?" : ["–ë—É—Ä–æ–≥–æ", "–ë–µ–ª–æ–≥–æ", "–ü–ª—é—à–µ–≤–æ–≥–æ", "–ù–µ—É–±–∏—Ç–æ–≥–æ"],
#  "–ò–∑ —á–µ–≥–æ, —Å–æ–≥–ª–∞—Å–Ω–æ –ø–æ–≥–æ–≤–æ—Ä–∫–µ –Ω–µ –≤—ã–∫–∏–Ω–µ—à—å —Å–ª–æ–≤?" : ["–ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏–∏", "–ì–∞–∑–µ—Ç—ã", "–ú–æ–ª–∏—Ç–≤—ã", "–ü–µ—Å–Ω–∏"],
#  "–ß—Ç–æ–±—ã –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –ö–æ–ª–æ–±–æ–∫, —Å—Ç–∞—Ä—É—Ö–∞ –Ω–∞–º–µ–ª–∞..." : ["–°–Ω–µ–≥–∞", "–õ–∏—Å—Ç—å–µ–≤", "–°–µ–Ω–∞", "–ú—É–∫–∏"],
#  "–í —á–µ—Å—Ç—å —á–µ–≥–æ –±—ã–ª –Ω–∞–∑–≤–∞–Ω –∫–æ–º–ø—å—é—Ç–µ—Ä –∫–æ–º–ø–∞–Ω–∏–∏ '–ú–∞–∫–∏–Ω—Ç–æ—à'?" : ["–í–∏–¥ –ø–ª–∞—â–∞", "–ó–æ–Ω—Ç", "–ù–∞—Å–µ–ª—ë–Ω–Ω—ã–π –ø—É–Ω–∫—Ç", "–°–æ—Ä—Ç —è–±–ª–æ–∫"],
#  "–ß—Ç–æ –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç —Ñ–∏–ª—É–º–µ–Ω–∏—Å—Ç?" : ["–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏", "–ü—Ä–æ–±–∫–∏", "–ü—Ä–µ–¥–º–µ—Ç—ã –∂–∏–≤–æ–ø–∏—Å–∏", "–°–ø–∏—á–µ—á–Ω—ã–µ –∫–æ—Ä–æ–±–∫–∏"],
#  "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–∫–æ–π –º–æ–Ω–µ—Ç–∫–∏ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –æ—Ç —Å–ª–æ–≤–∞ '—Å—Ç–æ' ?" : ["–∫–æ–ø–µ–π–∫–∞", "—à–∏–ª–ª–∏–Ω–≥", "–ø—Ñ–µ–Ω–Ω–∏–≥", "—Ü–µ–Ω—Ç"],
#  "–í –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∞ —Å–∞–º–∞—è –≤—ã—Å–æ–∫–∞—è –≥–æ—Ä–∞ –ë—Ä–∏—Ç–∞–Ω—Å–∫–∏—Ö –æ—Å—Ç—Ä–æ–≤–æ–≤?" : ["–ê–Ω–≥–ª–∏—è", "–£—ç–ª—å—Å", "–°—É–¥–∞–Ω", "–®–æ—Ç–ª–∞–Ω–¥–∏—è"],
#  "–ù–∞ —Å–∫–æ–ª—å–∫–æ –≥—Ä–∞–¥—É—Å–æ–≤ –Ω—É–∂–Ω–æ –ø–æ–≤–µ—Ä–Ω—É—Ç—å —Ü–∏—Ñ–µ—Ä–±–ª–∞—Ç —á–∞—Å–æ–≤, –Ω–∞—Ö–æ–¥—è—Å—å –≤ –ê–Ω–≥–ª–∏–∏, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –≤—Ä–µ–º—è –≤ –ò–Ω–¥–∏–∏?" : ["0", "90", "270", "180"],
#  "–ö–∞–∫–æ–π –≤–æ–ø—Ä–æ—Å, –ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é, –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –æ—Ç–≤–µ—Ç–∞?" : ["–ö–∞–≤–µ—Ä–∑–Ω—ã–π", "–§–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–π", "–≠–∫–∑–∞–º–µ–Ω–∞—Ü–∏–æ–Ω–Ω—ã–π", "–†–∏—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π"],
#  "–ò–º–µ–Ω–Ω–æ –≤ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–µ –≤ 1956 –≥–æ–¥—É –≤–ø–µ—Ä–≤—ã–µ –ø—Ä–æ—à—ë–ª –µ–∂–µ–≥–æ–¥–Ω—ã–π –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π –∫–æ–Ω–∫—É—Ä—Å –ï–≤—Ä–æ–≤–∏–¥–µ–Ω–∏–µ?" : ["–ò—Ç–∞–ª–∏—è", "–§—Ä–∞–Ω—Ü–∏—è", "–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è", "–®–≤–µ–π—Ü–∞—Ä–∏—è"],
#  "–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –±–æ—è–∑–Ω—å –≥–ª—É–±–∏–Ω—ã?" : ["–¢–∞–ª–∞—Å–æ—Ñ–æ–±–∏—è", "–ö–∏–º–æ—Ñ–æ–±–∏—è", "–ì–∏–¥—Ä–æ—Ñ–æ–±–∏—è", "–ë–∞—Ç–æ—Ñ–æ–±–∏—è"],
#  "–ù–∞–∑–æ–≤–∏—Ç–µ —Å–∞–º—ã–π –º–Ω–æ–≥–æ—á–∏—Å–ª–µ–Ω–Ω—ã–π (–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≤—ã–ø—É—â–µ–Ω–Ω—ã—Ö –∏–≥—Ä –∏ –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ —Å—Ä–µ–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π) –∂–∞–Ω—Ä –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã—Ö –∏–≥—Ä." : ["Arcade", "RPG", "RTS", "Action"],
#  "–°–∫–æ–ª—å–∫–æ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –∏–∑ –∂–∏–∑–Ω–∏ –ª–µ–Ω–∏–≤—Ü—ã –ø—Ä–æ–≤–æ–¥—è—Ç –≤–æ —Å–Ω–µ?" : ["70%", "80%", "85%", "75%"],
#  }

# —Å–ª–æ–≤–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
# –∫–ª—é—á - id —á–∞—Ç–∞
# –∑–Ω–∞—á–µ–Ω–∏–µ - —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—É–Ω–¥–æ–≤, —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞
users = {}


def decode_round(dict):
    if dict.get('type') == 'Round':
        r = Round()
        r.money = dict.get('money')
        r.questions = dict.get('questions')
        return r
    else:
        return dict


def encode_round(round):
    return {'money': round.money, 'question': round.questions, 'type': round}


# –∑–∞–ø–∏—Å—å –æ–±—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ —Ñ–∞–π–ª
def write_file():
    with open(USER_DATA, "w") as file:
        json.dump(users, file, default=encode_round)


def read_user_data():
    global users
    if os.path.getsize(USER_DATA) > 0:
        with open(USER_DATA) as file:
            users = json.load(file, object_hook=decode_round)
            print(users)
            return users


# —á—Ç–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
def read_questions():
    if os.path.getsize(QUESTIONS) > 0:
        with open(QUESTIONS) as file:
            # –∑–∞–≥—Ä—É–∂–∞–µ–º json –∏–∑ —Ñ–∞–π–ª–∞    
            data = json.load(file, object_hook=decode_round)
            print(data)
            return data
    else:
        return {}


read_questions()


# –∫–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ä–∞—É–Ω–¥–∞ –∏–≥—Ä—ã –∏–∑ 6 —Å–ª—É—á–∞–π–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
# –∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞: –≤—ã–∏–≥—Ä—ã—à–∞ –∏–≥—Ä–æ–∫–∞ –∏ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –≤–æ–ø—Ä–æ—Å–æ–≤
class Round:
    questions_count = 6

    def __init__(self):
        self.money = 0
        # —á—Ç–µ–Ω–∏–µ –≤—Å–µ—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
        all_questions_dict = read_questions()
        # —Å–ª–æ–≤–∞—Ä—å, –≤ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã 6 —Å–ª—É—á–∞–π–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–µ–¥–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞
        self.questions = {}
        for i in range(0, self.questions_count):
            # –ø–æ–ª—É—á–µ–º –≤—Å–µ –∫–ª—é—á–∏ –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞
            keys = list(all_questions_dict.keys())
            # –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –∫–ª—é—á
            key = random.choice(keys)
            # –¥–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ —Å–ª–æ–≤–∞—Ä—å –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ä–∞—É–Ω–¥–∞
            self.questions[key] = all_questions_dict.get(key)
            # —É–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –∏–∑ —Å–ª–æ–≤–∞—Ä—è –≤—Å–µ—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –ø–æ–º–æ—â—å—é –º–µ—Ç–æ–¥–∞ pop,
            # —á—Ç–æ–±—ã –≤–æ–ø—Ä–æ—Å –Ω–µ –ø–æ–ø–∞–ª—Å—è –≤ —Ä–∞—É–Ω–¥–µ –¥–≤–∞–∂–¥—ã
            all_questions_dict.pop(key)
        # –≤—ã–≤–æ–¥–∏–º –≤–æ–ø—Ä–æ—Å—ã –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—É–Ω–¥–∞ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è
        print(self.questions)

        # –º–µ—Ç–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–æ–Ω–µ—Ç –∏–≥—Ä–æ–∫—É –∑–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç

    def add_money(self):
        if self.money == 0:
            self.money = 10
        else:
            self.money *= 10
        return self.money

    # –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    def get_question(self):
        # –µ—Å–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –µ—â–µ –æ—Å—Ç–∞–ª–∏—Å—å
        if len(self.questions) > 0:
            # –º–µ—Ç–æ–¥ popitem —É–¥–∞–ª—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –≤ —Å–ª–æ–≤–∞—Ä–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ –∏–∑ –¥–≤—É—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤: –∫–ª—é—á–∞ –∏ –∑–Ω–∞—á–µ–Ω–∏—è  
            text, answers = self.questions.popitem()
            return text, answers
        # –µ—Å–ª–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å, —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None –∏ –≤—ã–∏–≥—Ä–∞–Ω–Ω—É—é —Å—É–º–º—É
        else:
            return None, self.money


# —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–π —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–ù–æ–≤–∞—è –∏–≥—Ä–∞" –∏ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
def control_keyboard():
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    new_game_btn = types.InlineKeyboardButton(BUTTONS[0], callback_data=BUTTONS[0])
    stat_game_btn = types.InlineKeyboardButton(BUTTONS[1], callback_data=BUTTONS[1])
    keyboard.row(new_game_btn, stat_game_btn)
    return keyboard


# —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
def answer_keyboard(answers):
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard_buttons = []
    for answer in answers:
        # –¥–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —Ç–∏–ø:"–æ—Ç–≤–µ—Ç", ok: "1", –µ—Å–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç, "0", –µ—Å–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
        data = {"type": "answer", "ok": "0"}
        # –≤ —Å–ø–∏—Å–∫–µ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –≤—Å–µ–≥–¥–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å –∏–Ω–¥–µ–∫—Å–æ–º 3
        if answers.index(answer) == 3:
            data["ok"] = "1"
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ json-—Å—Ç—Ä–æ–∫—É
        json_string = json.dumps(data)
        # —Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å —Ç–µ–∫—Å—Ç–æ–º –æ—Ç–≤–µ—Ç–∞ –∏ callback_data –¥–∞–Ω–Ω—ã–º–∏ —Å —Ç–∏–ø–æ–º-–æ—Ç–≤–µ—Ç –∏ —É–∫–∞–∑–∞–Ω–∏–µ–º –≤–µ—Ä–Ω—ã–π –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç
        button = types.InlineKeyboardButton(answer, callback_data=json_string)
        keyboard_buttons.append(button)
    # –º–µ—Ç–æ–¥ shuffle –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫, —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∏ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ—è–≤–ª—è–ª–∏—Å—å –≤ —Å–ª—É—á–∞–π–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    random.shuffle(keyboard_buttons)
    keyboard.add(*keyboard_buttons)
    return keyboard


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã start –≤—ã–≤–æ–¥–∏—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ 2 –∫–Ω–æ–ø–∫–∏: "–ù–æ–≤–∞—è –∏–≥—Ä–∞" –∏ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç, —Ö–æ—á–µ—à—å —Å—Ç–∞—Ç—å –º–∏–ª–ª–∏–æ–Ω–µ—Ä–æ–º? ü§ë", reply_markup=control_keyboard())
    global users
    users[str(message.chat.id)] = {}
    write_file()


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã help
@bot.message_handler(commands=['help'])
def help(message):
    bot.send_message(message.chat.id,
                     "–ü—Ä–∏–≤–µ—Ç! –í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:"
                     "\n/start - –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã"
                     "\n/help - —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥")


# –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö (–æ–±—â–∞—è —Å—É–º–º–∞ –¥–µ–Ω–µ–≥, —á–∏—Å–ª–æ —Å—ã–≥—Ä–∞–Ω–Ω—ã—Ö –∏–≥—Ä –∏ —Ç–µ–∫—É—â–∏–π —Ä–∞—É–Ω–¥) –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ id —á–∞—Ç–∞
def get_user_data(chat_id):
    user = users.get(int(chat_id))
    if user:
        money = user.get("money")
        rounds = user.get("rounds")
        new_round = user.get("new_round")
        return int(money), int(rounds), new_round
    else:
        return 0, 0, Round()
    write_file()


# —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–±—â–∞—è —Å—É–º–º–∞ –¥–µ–Ω–µ–≥, —á–∏—Å–ª–æ —Å—ã–≥—Ä–∞–Ω–Ω—ã—Ö –∏–≥—Ä –∏ —Ç–µ–∫—É—â–∏–π —Ä–∞—É–Ω–¥) –≤ —Å–ª–æ–≤–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–ª—é—á—É id —á–∞—Ç–∞
def set_user_data(chat_id, money, rounds, new_round):
    users[str(chat_id)] = {"money": int(money), "new_round": new_round, "rounds": rounds}
    write_file()
    read_user_data()


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ (–≤—Å–µ—Ö –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏)
@bot.callback_query_handler(func=lambda call: True)
def handler(call):
    read_user_data()
    # –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –≤—Å–µ –¥–µ–Ω—å–≥–∏, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—ã–≥—Ä–∞–Ω–Ω—ã—Ö —Ä–∞—É–Ω–¥–æ–≤, —Ç–µ–∫—É—â–∏–π —Ä–∞—É–Ω–¥
    all_money, rounds, new_round = get_user_data(call.message.chat.id)
    # –∫–Ω–æ–ø–∫–∞ "–ù–æ–≤–∞—è –∏–≥—Ä–∞"
    if call.data == BUTTONS[0]:
        # —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥, –æ–Ω –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤ —Å–µ–±–µ –≤–æ–ø—Ä–æ—Å—ã
        new_round = Round()
        # –ø–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
        question, answers = new_round.get_question()
        text = (f"–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!"
                f"\n‚ùì –í–æ–ø—Ä–æ—Å –Ω–∞ {10} –º–æ–Ω–µ—Ç:")
        bot.edit_message_text(f"{text}"
                              f"\n{question}", call.message.chat.id, call.message.message_id,
                              reply_markup=answer_keyboard(answers))
    # –∫–Ω–æ–ø–∫–∞ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
    elif call.data == BUTTONS[1]:
        text = (f"–í—Å–µ–≥–æ –º–æ–Ω–µ—Ç: {all_money} ü™ô"
                f"\n–í—Å–µ–≥–æ –∏–≥—Ä: {rounds} üéÆ")
        bot.edit_message_text(f"{text}", call.message.chat.id, call.message.message_id, reply_markup=control_keyboard())
    # –∫–Ω–æ–ø–∫–∏-–æ—Ç–≤–µ—Ç—ã
    else:
        # –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏—à–ª–∏ —Å –∫–Ω–æ–ø–∫–∏
        data = json.loads(call.data)
        # –ø–æ–ª—É—á–∞–µ–º —Ç–∏–ø, –µ—Å–ª–∏ —Ç–∏–ø "–æ—Ç–≤–µ—Ç"
        if data.get("type") == "answer":
            # –ø–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–ª–∏ –Ω–µ—Ç
            ok = data.get("ok")
            # –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç 
            if ok == "1":
                # –¥–æ–±–∞–≤–ª—è–µ–º –º–æ–Ω–µ—Ç—ã
                money = new_round.add_money()
                all_money += int(money)
                # –≤—ã–≤–æ–¥–∏–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
                question, answers = new_round.get_question()
                # –µ—Å–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –µ—â–µ –µ—Å—Ç—å, —Ç–æ –µ—Å—Ç—å get_question –≤–µ—Ä–Ω—É–ª –Ω–µ None, —Ç–æ –≤—ã–≤–æ–¥–∏–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
                if question:
                    text = (f"{random.choice(ANSWERS_YES)}\n–£ –≤–∞—Å {money} –º–æ–Ω–µ—Ç ü™ô"
                            f"\n‚ùì–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –Ω–∞ {money * 10} –º–æ–Ω–µ—Ç:\n")
                    bot.edit_message_text(f"{text}{question}", call.message.chat.id, call.message.message_id,
                                          reply_markup=answer_keyboard(answers))
                # –∏–Ω–∞—á–µ —Ä–∞—É–Ω–¥ –∑–∞–∫–æ–Ω—á–µ–Ω —Å –ø–æ–±–µ–¥–æ–π
                else:
                    text = (f"üéÅ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –†–∞—É–Ω–¥ –∑–∞–≤–µ—Ä—à–µ–Ω! üéÅ"
                            f"\nüíµ–í–∞—à –≤—ã–∏–≥—Ä—ã—à {money} –º–æ–Ω–µ—Ç:\n")
                    bot.edit_message_text(f"{text}", call.message.chat.id, call.message.message_id,
                                          reply_markup=control_keyboard())
                    # –¥–æ–±–∞–≤–ª—è–µ–º –º–æ–Ω–µ—Ç—ã, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä, —Ç–µ–∫—É—â–∏–π —Ä–∞—É–Ω–¥ —Å—Ç–∞–≤–∏–º –≤ None
                    money = new_round.add_money()
                    all_money += int(money)
                    rounds += 1
                    new_round = None
            # –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç, —Ç–æ —Ä–∞—É–Ω–¥ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –ø—Ä–æ–∏–≥—Ä—ã—à–µ–º
            elif ok == "0":
                text = "–í—ã –æ—à–∏–±–ª–∏—Å—å! üò¢\n–ù–æ–≤—ã–π —Ä–∞—É–Ω–¥ –±—É–¥–µ—Ç –ª—É—á—à–µ..."
                bot.edit_message_text(f"{text}", call.message.chat.id, call.message.message_id,
                                      reply_markup=control_keyboard())
                # –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä, —Ç–µ–∫—É—â–∏–π —Ä–∞—É–Ω–¥ —Å—Ç–∞–≤–∏–º –≤ None, –¥–µ–Ω—å–≥–∏ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º
                new_round = None
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    write_file()
    set_user_data(call.message.chat.id, all_money, rounds, new_round)
    bot.answer_callback_query(call.id)


bot.infinity_polling()
