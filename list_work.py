import os.path

import telebot
from telebot import types
import time
import json

bot = telebot.TeleBot("7965604140:AAE1PSb3NR4eEp6FbsOZv2PoAWjye95yTh0")


class Task:
    def __init__(self, name, task_day="", task_time=""):
        self.name = name
        self.task_day = task_day
        self.task_time = task_time
        self.id = time.time()
        print(self.id)


task_list = {

}


def decode_task(dict):
    if dict.get('type') == 'Task':
        t = Task(dict['name'], dict['day'], dict['time'])
        t.id = dict['id']
        return t
    else:
        return dict


def encode_task(task):
    return {'id': task.id, 'name': task.name, 'day': task.task_day, 'time': task.task_time, 'type': 'Task'}


def read_file():
    global task_list
    if os.path.getsize('data_todolist.json') > 0:
        with open('data_todolist.json') as file:
            task_list = json.load(file, object_hook=decode_task)


read_file()


def write_file():
    global task_list
    with open('data_todolist.json', 'w') as file:
        json.dump(task_list, file, default=encode_task)


def emoji_keyboard(task_id):
    keyboard = types.InlineKeyboardMarkup(row_width=4)
    btnsss = []
    for emo in EMOJI:
        json_dict = json.dumps({'do': EMOJI.index(emo), 'id': task_id, 'time': "_", 'day': '_'})
        print(json_dict)
        emo_butten = types.InlineKeyboardButton(emo, callback_data=json_dict)
        btnsss.append(emo_butten)
    keyboard.add(*btnsss)
    return keyboard


EMOJI = ['‚úÖ', '‚ùå', 'üóì', 'üïë']

WEEK_BUTTONS = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]


def Day_keyboard(new_task_id):
    keyboard = types.InlineKeyboardMarkup(row_width=3)
    btns = []
    for day in WEEK_BUTTONS:
        json_dict = json.dumps({"day": WEEK_BUTTONS.index(day), "id": new_task_id, 'time': '_'})
        print(json_dict)
        day_btn = types.InlineKeyboardButton(day, callback_data=json_dict)
        btns.append(day_btn)
    keyboard.add(*btns)
    return keyboard


@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç –æ—Ç–≤–µ—á–∞—é—â–∏–π –∑–∞ —Ç–≤–æ–π —Å–ø–∏—Å–æ–∫ –¥–µ–ª')
    task_list[str(message.chat.id)] = []
    print(task_list)
    keyboard = types.ReplyKeyboardMarkup()
    knopka = types.KeyboardButton("–∫–Ω–æ–ø–∫–∞")
    new_task = types.KeyboardButton("–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞")
    list_work = types.KeyboardButton("—Å–ø–∏—Å–æ–∫ –¥–µ–ª")
    keyboard.add(new_task, list_work, knopka)
    bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏ "–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞", —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É.'
                                      '\n –ù–∞–ø–∏—à–∏ "—Å–ø–∏—Å–æ–∫ –¥–µ–ª", —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫.'
                                      '\n –ù–∞–ø–∏—à–∏ "–∫–Ω–æ–ø–∫–∞", —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞.', reply_markup=keyboard)


@bot.message_handler(content_types=['text'])
def answer(message):
    if message.text.lower() == '–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞':
        bot.send_message(message.chat.id, '–≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:')
        return

    if message.text.lower() == '–∫–Ω–æ–ø–∫–∞':
        bot.send_message(message.chat.id, '–≤–≤–µ–¥–∏—Ç–µ –∫–Ω–æ–ø–∫—É:')
        return

    if message.text.lower() == '—Å–ø–∏—Å–æ–∫ –¥–µ–ª':
        bot.send_message(message.chat.id, '–≤–∞—à —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:')
        for i, t in enumerate(task_list[str(message.chat.id)]):
            bot.send_message(message.chat.id, f"{i + 1}) {t.name}__{t.task_day}__{t.task_time}",
                             reply_markup=emoji_keyboard(t.id))

        return
    new_task = Task(message.text)
    task_list[str(message.chat.id)].append(new_task)
    write_file()
    bot.send_message(message.chat.id, f"–¥–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞:'{new_task.name}'")
    bot.send_message(message.chat.id, '–≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏', reply_markup=Day_keyboard(new_task.id))
    bot.send_message(message.chat.id, '—Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞–¥–∞—á–∏', reply_markup=time_keyboard(new_task.id))


def time_keyboard(new_task_id):
    keyboard = types.InlineKeyboardMarkup(row_width=6)
    btnss = []
    for timer in range(0, 24):
        timer_btn = types.InlineKeyboardButton(f'{timer}:00', callback_data=json.dumps(
            {"time": f'{timer}:00', "id": new_task_id, 'day': '_'}))
        btnss.append(timer_btn)
    keyboard.add(*btnss)
    return keyboard


def Delete_task(chat_id, task_id):
    for t in task_list[str(chat_id)]:
        if t.id == task_id:
            task_list[str(chat_id)].remove(t)


@bot.callback_query_handler(
    func=lambda call: 'do' in json.loads(call.data) and EMOJI[json.loads(call.data)['do']] in EMOJI)
def Do_select(call):
    id = json.loads(call.data)['id']
    do = EMOJI[json.loads(call.data)['do']]
    chat_id = call.message.chat.id
    if do == EMOJI[0]:
        Delete_task(chat_id=call.message.chat.id, task_id=id)
        bot.edit_message_text(f'–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ ‚úÖ', call.message.chat.id, call.message.message_id)
    if do == EMOJI[1]:
        Delete_task(chat_id=call.message.chat.id, task_id=id)
        bot.edit_message_text(f'–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞ ‚ùå', call.message.chat.id, call.message.message_id)
    if do == EMOJI[2]:
        bot.edit_message_text(f'–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å', call.message.chat.id, call.message.message_id,
                              reply_markup=Day_keyboard(id))
    if do == EMOJI[3]:
        bot.edit_message_text(f'–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è', call.message.chat.id, call.message.message_id,
                              reply_markup=time_keyboard(id))


@bot.callback_query_handler(func=lambda call: json.loads(call.data)['time'][-1] == "0")
def timer_select(call):
    print(call.data)
    id = json.loads(call.data)['id']
    for t in task_list[str(call.message.chat.id)]:
        if t.id == id:
            t.task_time = json.loads(call.data)["time"]
            bot.edit_message_text(f'–≤—ã–±—Ä–∞–Ω–æ –≤—Ä–µ–º—è: {t.task_time}', call.message.chat.id, call.message.message_id)
    write_file()


@bot.callback_query_handler(func=lambda call: WEEK_BUTTONS[json.loads(call.data)['day']] in WEEK_BUTTONS)
def Day_select(call):
    print(call.data)
    id = json.loads(call.data)['id']
    for d in task_list[str(call.message.chat.id)]:
        if d.id == id:
            d.task_day = WEEK_BUTTONS[json.loads(call.data)['day']]
            bot.edit_message_text(f'–≤—ã–±—Ä–∞–Ω –¥–µ–Ω—å: {d.task_day}', call.message.chat.id, call.message.message_id)
    write_file()


bot.infinity_polling()
